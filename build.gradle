plugins {
    id "com.google.protobuf" version "0.9.3"
    id 'java'
    id 'idea'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.23.2'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.23.2'
    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.56.0'


    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.23.2'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.56.0'
        }
    }

    generateProtoTasks {
        all()*.plugins{
            grpc {}
        }
    }
}
//The below code of gradle execute is for two-way-communication demo
/*
task execute(type: JavaExec) {
    if (project.hasProperty("targetClass")) {
        main = "gRPCClient.${targetClass}"
    } else {
        main = "gRPCClient.Main"
    }
    classpath = sourceSets.main.runtimeClasspath

    if (project.hasProperty("clientArgs")) {
        args clientArgs.split(',')
    }
}
*/

task execute(type: JavaExec) {
    main = "org.example.DockerMain"
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty("clientArgs")) {
        args clientArgs.split(',')
    }
}

test {
    useJUnitPlatform()
}